''' Clasificador de snacks saludables - Practicar con numpy para la generaci√≥n de datos sint√©ticos y con arboles de decisi√≥n para clasificar si un snak es saludable o no en funci√≥n de sus caracter√≠sticas.

Objetivo:
En este ejercicio, aprender√°s a crear un clasificador para predecir si un snack es saludable o no, bas√°ndote en caracter√≠sticas nutricionales como las calor√≠as, az√∫car, prote√≠nas, grasas y fibra.
Usaremos un √°rbol de decisi√≥n para crear un modelo que prediga si un snack es saludable en funci√≥n de estos atributos.

Descripci√≥n:
Imagina que trabajas en una aplicaci√≥n de salud que recomienda snacks a los usuarios. Tienes acceso a un conjunto de datos que contiene informaci√≥n sobre varios snacks y su contenido nutricional.
Usaremos estos datos para entrenar un modelo que pueda predecir si un snack es saludable bas√°ndose en sus atributos.

Pasos a seguir:
Creaci√≥n de la clase Snack:
Define una clase Snack que tenga los siguientes atributos: calories, sugar, protein, fat, fiber, y un atributo opcional is_healthy, que ser√° el resultado que queremos predecir (1 si el snack es saludable, 0 si no lo es).
Crea un m√©todo to_vector() que convierta un snack en un vector de caracter√≠sticas (calor√≠as, az√∫car, prote√≠nas, grasas, fibra).
Generaci√≥n de Datos Sint√©ticos con la clase SnackGenerator:
Crea una clase SnackGenerator que sea capaz de generar un conjunto de datos sint√©ticos con snacks. Esta clase debe crear entre 50 y 200 snacks con valores aleatorios para las caracter√≠sticas mencionadas.
La variable is_healthy debe seguir una regla aproximada: un snack es saludable si tiene menos de 200 calor√≠as, menos de 15 gramos de az√∫car, menos de 10 gramos de grasa, y al menos 5 gramos de prote√≠na o fibra.
Clasificador de Snacks con √Årbol de Decisi√≥n:
Crea una clase SnackClassifier que use un √°rbol de decisi√≥n para clasificar los snacks.
Esta clase debe tener dos m√©todos:
fit(): entrenar el modelo usando un conjunto de snacks y sus etiquetas (is_healthy).
predict(): predecir si un snack espec√≠fico es saludable o no.

Crear un Ejemplo de Uso:
Crea un objeto de la clase SnackRecommendationExample que entrene el clasificador utilizando el generador de snacks.
Luego, crea un snack de prueba con valores nutricionales conocidos, como 150 calor√≠as, 10 gramos de az√∫car, 6 gramos de prote√≠na, 5 gramos de grasa y 3 gramos de fibra.
Usa el clasificador para predecir si este snack es saludable y muestra la predicci√≥n.

Requisitos:
Uso de √Årbol de Decisi√≥n: Para realizar la clasificaci√≥n, usa la librer√≠a sklearn y su DecisionTreeClassifier.
Generaci√≥n de datos: Usa numpy para generar valores aleatorios.
Impresi√≥n de resultados: Imprime la informaci√≥n nutricional del snack de prueba junto con la predicci√≥n de si es saludable o no.

Resultado esperado:
Al ejecutar el c√≥digo, el sistema debe mostrar la informaci√≥n nutricional del snack de prueba y una predicci√≥n indicando si es saludable o no.

Ejemplo de uso

# Ejecutar ejemplo
example = SnackRecommendationExample()
example.run()
Salida esperada

üîç Snack Info:
Calories: 150, Sugar: 10g, Protein: 6g, Fat: 5g, Fiber: 3g
‚úÖ Predicci√≥n: Este snack no es saludable.
'''

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

import numpy as np


class Snack:
    """
    Clase que representa un snack con sus caracter√≠sticas nutricionales.
    """

    def __init__(self, calories, sugar, protein, fat, fiber, is_healthy=None):
        self.calories = calories
        self.sugar = sugar
        self.protein = protein
        self.fat = fat
        self.fiber = fiber
        self.is_healthy = is_healthy

    def to_vector(self):
        """
        Convierte las caracter√≠sticas del snack en un vector.
        """
        return [self.calories, self.sugar, self.protein, self.fat, self.fiber]

    def __str__(self):
        """
        Representaci√≥n en string del snack.
        """
        return f"Calories: {self.calories}, Sugar: {self.sugar}g, Protein: {self.protein}g, Fat: {self.fat}g, Fiber: {self.fiber}g"


class SnackGenerator:
    """
    Clase para generar datos sint√©ticos de snacks.
    """

    def __init__(self, num_snacks=None):
        if num_snacks is None:
            # Generar entre 50 y 200 snacks si no se especifica
            self.num_snacks = np.random.randint(50, 201)
        else:
            self.num_snacks = num_snacks

    def generate(self):
        """
        Genera un conjunto de snacks con valores aleatorios.
        """
        snacks = []
        for _ in range(self.num_snacks):
            # Generar valores aleatorios para cada caracter√≠stica
            calories = np.random.randint(50, 400)
            sugar = np.random.randint(0, 30)
            protein = np.random.randint(0, 20)
            fat = np.random.randint(0, 25)
            fiber = np.random.randint(0, 10)

            # Determinar si es saludable seg√∫n reglas aproximadas
            is_healthy = 1 if (calories < 300 and sugar < 20 and fat < 10 and
                               (protein >= 10 or fiber >= 10)) else 0

            # Crear y a√±adir el snack a la lista
            snack = Snack(calories, sugar, protein, fat, fiber, is_healthy)
            snacks.append(snack)

        return snacks


class SnackClassifier:
    """
    Clasificador de snacks utilizando √°rbol de decisi√≥n.
    """

    def __init__(self):
        self.model = DecisionTreeClassifier(random_state=42)
        self.is_trained = False

    def fit(self, snacks):
        """
        Entrena el modelo con un conjunto de snacks.
        """
        # Extraer caracter√≠sticas y etiquetas
        X = [snack.to_vector() for snack in snacks]
        y = [snack.is_healthy for snack in snacks]

        # Dividir en conjunto de entrenamiento y prueba
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        # Entrenar el modelo
        self.model.fit(X_train, y_train)
        self.is_trained = True

        # Evaluar el modelo (opcional, para informaci√≥n)
        score = self.model.score(X_test, y_test)
        print(f"üìä Precisi√≥n del modelo: {score:.2f}")

    def predict(self, snack):
        """
        Predice si un snack es saludable o no.
        """
        if not self.is_trained:
            raise Exception("El modelo debe ser entrenado antes de hacer predicciones")

        # Obtener el vector de caracter√≠sticas del snack
        features = [snack.to_vector()]

        # Hacer la predicci√≥n
        prediction = self.model.predict(features)[0]

        return prediction


class SnackRecommendationExample:
    """
    Ejemplo de uso del sistema de recomendaci√≥n de snacks.
    """

    def __init__(self):
        # Inicializar el generador y el clasificador
        self.generator = SnackGenerator()
        self.classifier = SnackClassifier()

    def run(self):
        # Generar snacks
        snacks = self.generator.generate()
        print(f"üçé Generados {len(snacks)} snacks para entrenamiento")

        # Entrenar el clasificador
        self.classifier.fit(snacks)

        # Crear un snack de prueba
        test_snack = Snack(150, 10, 6, 5, 3)

        # Predecir si es saludable
        prediction = self.classifier.predict(test_snack)

        # Mostrar resultados
        print("\nüîç Snack Info:")
        print(test_snack)

        if prediction == 1:
            print("‚úÖ Predicci√≥n: Este snack es saludable.")
        else:
            print("‚úÖ Predicci√≥n: Este snack no es saludable.")


# Ejecutar ejemplo
if __name__ == "__main__":
    example = SnackRecommendationExample()
    example.run()