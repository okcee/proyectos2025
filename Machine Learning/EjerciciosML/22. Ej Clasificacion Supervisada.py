''' Ejercicio de codificaci√≥n 22 - Recomendador de canciones inteligente

üß† Contexto
Est√°s desarrollando un sistema para una plataforma musical que quiere ofrecer recomendaciones autom√°ticas basadas en caracter√≠sticas cuantitativas de las canciones, como su energ√≠a o duraci√≥n.
Utilizar√°s el algoritmo K-Nearest Neighbors (KNN) de la biblioteca scikit-learn para encontrar las canciones m√°s similares a una canci√≥n objetivo.

üéØ Objetivo del ejercicio
Implementar un sistema de recomendaci√≥n de canciones en Python, usando el modelo de K Vecinos M√°s Cercanos de scikit-learn.
El sistema debe permitir recomendar canciones similares a partir de caracter√≠sticas musicales num√©ricas.

üìå Requisitos
üß© 1. Clase Song
Crea una clase Song que represente una canci√≥n, con los siguientes atributos:
title (str): t√≠tulo de la canci√≥n.
artist (str): artista o grupo musical.
energy (float): energ√≠a de la canci√≥n (0.4 a 1.0).
danceability (float): cu√°n bailable es la canci√≥n (0.4 a 1.0).
duration (int): duraci√≥n en segundos (180 a 300).
popularity (int): nivel de popularidad (50 a 100).
La clase debe incluir:
Un m√©todo to_vector() que devuelva una lista con los valores [energy, danceability, duration, popularity].
Un m√©todo __str__() que permita imprimir la canci√≥n en formato "Song Title by Artist".
ü§ñ 2. Clase SongRecommender
Crea una clase SongRecommender que use el algoritmo de KNN de scikit-learn:
El constructor debe aceptar un par√°metro k (n√∫mero de vecinos a considerar).
El m√©todo fit(song_list) debe:
Convertir la lista de canciones en una matriz de caracter√≠sticas num√©ricas.
Ajustar el modelo NearestNeighbors con estas caracter√≠sticas.
El m√©todo recommend(target_song) debe:
Obtener los k vecinos m√°s cercanos a la canci√≥n objetivo.
Devolver la lista de canciones recomendadas (sin incluir la propia canci√≥n objetivo si aparece).
üîÅ 3. Clase SongGenerator
Crea una clase SongGenerator con:
Un par√°metro num_songs (por defecto 30).
Un m√©todo generate() que genere canciones aleatorias con numpy, usando nombres como "Song1", "Song2", etc., y artistas "Artist1", "Artist2", etc.
üß™ 4. Clase SongRecommendationExample
Crea una clase de ejemplo que:
Genere una lista de canciones con SongGenerator.
Defina una canci√≥n personalizada como objetivo (target_song).
Cree una instancia de SongRecommender, la entrene con las canciones y obtenga recomendaciones.
Imprima por pantalla las canciones recomendadas.
Ejemplo de salida:
example = SongRecommendationExample()
example.run()
Salida esperada

üéµ Recomendaciones para 'Mi Canci√≥n':
 - Song29 by Artist4
 - Song11 by Artist1
 - Song25 by Artist5

üí° Recomendaciones para completar el ejercicio
Usa numpy para generar valores aleatorios.
Recuerda importar NearestNeighbors desde sklearn.neighbors.
Aseg√∫rate de convertir los objetos Song a vectores antes de ajustar o predecir con el modelo.
No incluyas la canci√≥n objetivo entre las recomendaciones (verifica si es necesario).

Objetivo del aprendizaje: Practicar con numpy para la generaci√≥n de datos sint√©ticos y con el algoritmo de k vecinos m√°s cercanos para realizar predicciones de canciones.
'''

import numpy as np
from sklearn.neighbors import NearestNeighbors

# üß© 1. Clase Song: Crea una clase Song que represente una canci√≥n
class Song:
    """Representa una canci√≥n con sus caracter√≠sticas musicales."""
    def __init__ (self, title, artist, energy, danceability, duration, popularity):
        # Atributos
        self.title = title
        self.artist = artist
        self.energy = energy
        self.danceability = danceability
        self.duration = duration
        self.popularity = popularity
    # Un m√©todo to_vector() que devuelva una lista con los valores [energy, danceability, duration, popularity]
    def to_vector(self):
        """Devuelve las caracter√≠sticas num√©ricas como una lista."""
        return [self.energy, self.danceability, self.duration, self.popularity]
    # Un m√©todo __str__() que permita imprimir la canci√≥n en formato "Song Title by Artist"
    def __str__(self):
        """Representaci√≥n en formato 'Song Title by Artist'."""
        return f"Song {self.title} by {self.artist}"

# ü§ñ 2. Clase SongRecommender: Crea una clase SongRecommender que use el algoritmo de KNN de scikit-learn
class SongRecommender:
    """Recomienda canciones usando K-Nearest Neighbors."""
    def __init__(self, k): # El constructor debe aceptar un par√°metro k
        """Inicializa el recomendador con k vecinos."""
        if not isinstance(k, int) or k <= 0:
            raise ValueError("k debe ser un entero positivo.")
        self.k = k
        self.model = NearestNeighbors(n_neighbors=self.k, algorithm='auto') # Inicializa el modelo NearestNeighbors aqu√≠, especificando el n√∫mero de vecinos (k) y el algoritmo a usar (por defecto 'auto' que suele ser eficiente, si no se definir√≠a con el par√°metro opcional 'algorithm')
        '''La clase NearestNeighbors tiene varios par√°metros que puedes especificar, como n_neighbors (el n√∫mero de vecinos k), metric (la forma de medir la distancia), y algorithm (el m√©todo interno para encontrar los vecinos).'''
        self.song_list = [] # Lista para guardar las canciones originales
        self.song_vectors = None # Array NumPy para guardar los vectores de caracter√≠sticas de la matriz NumPy
    def fit(self, song_list): # Convertir la lista de canciones en una matriz de caracter√≠sticas num√©ricas. Ajustar el modelo NearestNeighbors con estas caracter√≠sticas.
        """Entrena el modelo KNN con una lista de canciones."""
        if not song_list:
            print("Advertencia: La lista de canciones para entrenar est√° vac√≠a.") # Validaci√≥n
            self.song_list = []
            self.song_vectors = np.empty((0, 4)) # Array vac√≠o con 4 columnas
            return

        # Convierte la lista de objetos Song a una matriz NumPy
        # Se usa list comprehension y np.array (Cumple recomendaci√≥n)
        self.song_vectors = np.array([song.to_vector() for song in song_list])
        # Ajusta el modelo NearestNeighbors con los vectores
        self.model.fit(self.song_vectors)

        self.song_list = song_list
        # Convierte cada objeto Song en su vector de caracter√≠sticas usando to_vector() y crea un array NumPy con todos estos vectores. Cada fila es una canci√≥n
        self.song_vectors = np.array([song.to_vector() for song in song_list]) # np.array(...) Esta es la funci√≥n de NumPy que toma la lista de listas generada por la comprensi√≥n y la convierte en un array de NumPy
        # Entrena (ajusta) el modelo KNN con los vectores de caracter√≠sticas. El modelo aprende la estructura espacial de los datos para poder encontrar vecinos r√°pidamente.
        self.model.fit(self.song_vectors)
    def recommend(self, target_song):
        """
        Encuentra y devuelve las k canciones m√°s similares a target_song.
        Excluye la propia target_song de las recomendaciones.
        Args:
            target_song (Song): La canci√≥n para la cual buscar recomendaciones.
        Returns:
            list[Song]: Una lista de las k canciones recomendadas (excluyendo target_song si est√° presente).
            Devuelve menos de k si no hay suficientes canciones √∫nicas.
        """
        if not self.song_list:
            print("El modelo no ha sido entrenado o la lista de canciones est√° vac√≠a. No se pueden generar recomendaciones.")
            return []
        # 1. Preparar el vector de la canci√≥n objetivo: convierte la canci√≥n objetivo a vector NumPy 2D (1 fila):
        #    - Llama a target_song.to_vector() para obtener sus caracter√≠sticas num√©ricas.
        #    - np.array(...) convierte esa lista en un array NumPy.
        #    - .reshape(1, -1) lo transforma en un array 2D con una sola fila y
        #      tantas columnas como caracter√≠sticas tenga. Esto es necesario porque
        #      los m√©todos de scikit-learn esperan una matriz de muestras (aunque sea una sola).
        target_vector = np.array(target_song.to_vector()).reshape(1, -1)

        # 2. Encontrar los vecinos m√°s cercanos:
        # Encuentra los k+1 vecinos m√°s cercanos (incluyendo potencialmente a s√≠ misma)
        # Pedimos k+1 por si la propia canci√≥n objetivo es el vecino m√°s cercano (distancia 0)
        # As√≠ aseguramos tener k recomendaciones *distintas* si es posible.
        num_neighbors_to_find = min(self.k + 1, len(self.song_list)) # No pedir m√°s vecinos que canciones hay
        distances, indices = self.model.kneighbors(target_vector, n_neighbors=num_neighbors_to_find)
        # El m√©todo .kneighbors() devuelve dos cosas: indices: Las posiciones (√≠ndices) de las canciones m√°s cercanas en la lista original y distances: Los valores num√©ricos de las distancias calculadas entre la target_song y cada una de esas canciones vecinas encontradas. Una distancia menor significa que la canci√≥n vecina es m√°s similar a la canci√≥n objetivo, seg√∫n las caracter√≠sticas usadas.

        # 3. Obtener las canciones recomendadas a partir de los √≠ndices:
        recommended_songs = []
        # Itera sobre los √≠ndices de los vecinos encontrados
        for i in indices[0]:
            neighbor_song = self.song_list[i]
            # Excluye la canci√≥n objetivo (comparaci√≥n de identidad de objeto)
            # (Cumple recomendaci√≥n)
            if neighbor_song is not target_song:
                recommended_songs.append(neighbor_song)
            # Si ya hemos encontrado k recomendaciones distintas, paramos
            if len(recommended_songs) == self.k:
                break
        return recommended_songs

# üîÅ 3. Clase SongGenerator
class SongGenerator: # Crea una clase SongGenerato con un par√°metro num_songs (por defecto 30).
    """Genera una lista de objetos Song aleatorios."""
    def __init__(self, num_songs=30):
        """Inicializa el generador con el n√∫mero de canciones."""
        self.num_songs = num_songs
    def generate(self): # Un m√©todo generate() que genere canciones aleatorias con numpy
        """Genera y devuelve la lista de canciones aleatorias."""
        songs = []
        if self.num_songs <= 0:
            return songs
        
        for i in range(1, self.num_songs + 1):
            # Nombres y artistas gen√©ricos como se pide
            title = f"Song{i}" # usando nombres como "Song1", "Song2"
            artist = f"Artist{i}" # artistas "Artist1", "Artist2" ## Si quisiesemos menos artistas que canciones: artist = f"Artist{np.random.randint(1, self.num_songs // 2 + 1)}"
            # Genera caracter√≠sticas aleatorias usando numpy (Cumple recomendaci√≥n)
            energy = np.random.uniform(0.4, 1.0) # Atributos de las canciones...
            danceability = np.random.uniform(0.4, 1.0)
            duration = np.random.randint(180, 301)
            popularity = np.random.randint(50, 101)
            # Crea el objeto Song y lo a√±ade a la lista de Python
            songs.append(Song(title, artist, energy, danceability, duration, popularity)) # A√±ade un objeto de la clase Song (que contiene los datos de una canci√≥n generada) a la lista vac√≠a llamada songs, utilizando el m√©todo .append() propio de las listas de Python, que sirve para a√±adir un elemento al final de la lista existente
        return songs

# üß™ 4. Clase SongRecommendationExample
class SongRecommendationExample: # Clase de ejemplo
    """Clase de ejemplo para demostrar el sistema de recomendaci√≥n."""
    def __init__(self, k_neighbors=5, num_generated_songs=30):
        # Genera la lista de canciones base
        self.song_generator = SongGenerator(num_songs=num_generated_songs)
        self.songs = self.song_generator.generate()
        # Define una canci√≥n objetivo personalizada (como en el ejemplo de salida)
        # Usamos valores dentro de los rangos esperados
        self.target_song = Song(title="Mi Canci√≥n", artist="Mi Artista",
                                energy=0.75, danceability=0.85,
                                duration=215, popularity=88)
        # IMPORTANTE: A√±adir la canci√≥n objetivo a la lista total de canciones
        # para que el modelo la conozca si queremos poder excluirla correctamente
        # por identidad y para que las distancias se calculen respecto a todo el cat√°logo.
        self.songs.append(self.target_song)
        # Crea y entrena el recomendador
        self.recommender = SongRecommender(k=k_neighbors)
        self.recommender.fit(self.songs) # Entrena con la lista que incluye la target_song

    def run(self):
        """Ejecuta el proceso de recomendaci√≥n e imprime los resultados."""
        print(f"üéµ Recomendaciones para '{self.target_song.title}':") # Ajustado para usar solo el t√≠tulo
        # Obtiene las recomendaciones para la canci√≥n objetivo
        recommended_songs = self.recommender.recommend(self.target_song)
        # Imprime las canciones recomendadas
        if recommended_songs:
            for song in recommended_songs:
                # Usa el m√©todo __str__ de Song para el formato "Title by Artist"
                print(f" - {song}")
        else:
            print("   No se encontraron recomendaciones.")

# --------------------------------------------------
# Bloque de ejecuci√≥n principal
# --------------------------------------------------
if __name__ == "__main__":
    # Crea una instancia del ejemplo y la ejecuta
    example = SongRecommendationExample(k_neighbors=3, num_generated_songs=50) # k=3 para coincidir con el n√∫mero de items en la salida de ejemplo
    example.run()

'''
El m√©todo .reshape() se utiliza com√∫nmente en la librer√≠a NumPy de Python para cambiar la forma (dimensiones) de un array sin cambiar sus datos.

La sintaxis b√°sica es:
array_original.reshape(nueva_forma, order='C')

Aqu√≠ te desglosamos los elementos:
- array_original: Es el array de NumPy (o un objeto que se puede convertir en uno, como el .values de un DataFrame/Series de Pandas) al que quieres cambiar la forma.
- .reshape(): El nombre del m√©todo.
- nueva_forma: Este es el argumento principal y obligatorio. Especifica la nueva forma (dimensiones) que quieres que tenga el array. Puede ser:
    - Un entero: Para convertir el array en un array 1D (aplanarlo).
    - Una tupla de enteros: Donde cada entero representa el tama√±o de una dimensi√≥n. Por ejemplo, (filas, columnas) para un array 2D, (profundidad, filas, columnas) para un array 3D, etc.
    - Uno de los elementos de la tupla de nueva_forma puede ser -1. Si usas -1, NumPy calcular√° autom√°ticamente el tama√±o de esa dimensi√≥n bas√°ndose en el tama√±o total del array y los tama√±os de las otras dimensiones que has especificado. Solo puede haber un -1 en la tupla. La condici√≥n es que el n√∫mero total de elementos en la nueva_forma (calculando el -1) debe ser igual al n√∫mero total de elementos en el array_original.
    - order: Este argumento es opcional y especifica el orden en que se leen los elementos del array original para colocarlos en el nuevo array.
        - 'C' (por defecto): Lee/escribe elementos usando el orden de indexaci√≥n estilo C (orden por filas o "row-major").
        - 'F': Lee/escribe elementos usando el orden de indexaci√≥n estilo Fortran (orden por columnas o "column-major").
        - 'A': Lee/escribe en orden Fortran si el array original est√° en Fortran-contiguous, de lo contrario usa orden C.
'''