''' Predicci√≥n para acertar la loter√≠a - Practicar con algoritmos y obtener la serie con mas posiblidades de acertar la loter√≠a

üåü Descripci√≥n general
Imagina que eres parte del equipo de an√°lisis predictivo de una empresa de juegos de azar.
Tu tarea es desarrollar un sistema capaz de analizar combinaciones de loter√≠a y estimar cu√°les tienen m√°s probabilidad de √©xito, utilizando inteligencia artificial.
Para ello, crear√°s un modelo de clasificaci√≥n con RandomForestClassifier que aprenda de datos hist√≥ricos simulados, y luego lo aplicar√°s a nuevas combinaciones para seleccionar las mejores.

üìå Objetivos del proyecto
Desarrollar una aplicaci√≥n completa compuesta por varias clases, que sea capaz de:
Simular combinaciones de loter√≠a (con 6 n√∫meros √∫nicos entre 1 y 49).
Generar datos de entrenamiento con etiquetas de "√©xito" (1) o "fracaso" (0), simulando que el 10% de las combinaciones hist√≥ricas fueron ganadoras.
Entrenar un modelo de machine learning para predecir la probabilidad de √©xito.
Aplicar el modelo a nuevas combinaciones aleatorias.
Mostrar la mejor combinaci√≥n seg√∫n el modelo.
Visualizar en una gr√°fica las 10 combinaciones con mayor probabilidad de √©xito.

üß± Clases que debes implementar
1.  Clase GeneradorSeries
Responsable de generar combinaciones aleatorias:
M√©todo generar_series(cantidad): genera cantidad combinaciones de 6 n√∫meros √∫nicos aleatorios entre 1 y 49.
Cada combinaci√≥n debe estar ordenada para mayor coherencia visual.
2. Clase DatosLoteria
Encargada de crear los datos de entrenamiento:
M√©todo generar_datos_entrenamiento(cantidad=1000): genera un DataFrame con 1000 combinaciones y una columna adicional llamada "Exito" con valores 1 (√©xito) o 0 (fracaso), simulando que el 10% de las combinaciones fueron ganadoras.
3. Clase ModeloLoteria
Encargada de construir y entrenar el modelo predictivo:
Entrena un modelo de RandomForestClassifier.
M√©todos:
entrenar(X, y): entrena el modelo con los datos escalados.
predecir_probabilidades(X): devuelve las probabilidades de √©xito para cada combinaci√≥n evaluada.
4. Clase VisualizadorResultados
Responsable de mostrar los resultados en un gr√°fico:
M√©todo graficar_top_combinaciones(df_series, probabilidades, top_n=10):
Muestra un gr√°fico de barras horizontal con las 10 combinaciones m√°s prometedoras.
Usa matplotlib.pyplot.
5. Clase EjecutarSimulacion
Clase principal que ejecuta todo el flujo del proyecto:
M√©todo ejecutar():
Genera los datos simulados.
Entrena el modelo.
Genera nuevas combinaciones a evaluar.
Predice la probabilidad de √©xito.
Muestra por pantalla la mejor combinaci√≥n encontrada.
Muestra un gr√°fico con las 10 m√°s prometedoras.

üìå Requisitos t√©cnicos
Utiliza pandas y numpy para manipular datos.
Usa RandomForestClassifier de sklearn.ensemble.
Escala las caracter√≠sticas num√©ricas con StandardScaler.
Crea gr√°ficos con matplotlib.pyplot.

üéØ Ejemplo de uso
simulacion = EjecutarSimulacion()
simulacion.ejecutar()

Salida esperada
üéØ Mejor serie encontrada:
N√∫meros: [7, 35, 39, 41, 43, 47]
Probabilidad estimada de √©xito: 0.4300
'''

