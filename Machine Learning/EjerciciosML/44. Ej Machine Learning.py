''' Predicci√≥n de abandono escolar - Practicar con la eleccion del modelo a utilizar y mostrar una predicci√≥n

Imagina que formas parte del equipo de anal√≠tica de datos de una universidad.
Tu objetivo es construir un modelo de machine learning que prediga si un estudiante probablemente abandonar√° sus estudios, bas√°ndote en ciertas caracter√≠sticas acad√©micas y de comportamiento.

üìä Los responsables del √°rea te proporcionan un conjunto de datos simulados con la siguiente informaci√≥n para cada estudiante:
Edad: edad del estudiante (entre 18 y 29 a√±os).
Horas_estudio: promedio de horas semanales dedicadas al estudio.
Asistencia: porcentaje de asistencia a clase.
Promedio: nota media del estudiante (en escala de 0 a 10).
Uso_online: n√∫mero de horas por semana que usa la plataforma educativa online.
Abandono: variable objetivo (0 = contin√∫a, 1 = abandona).

üß† Tu misi√≥n:
Construir un sistema basado en √°rboles de decisi√≥n que permita:
Simular los datos como si fueran recolectados de 200 estudiantes.
Entrenar un modelo de machine learning que prediga la variable Abandono.
Evaluar el modelo con m√©tricas adecuadas.
Predecir si un nuevo estudiante abandonar√° o no, a partir de sus datos.

‚úÖ Requisitos t√©cnicos
Debes organizar tu soluci√≥n en al menos tres clases:
üîπ Clase SimuladorDatos
La clase SimuladorDatos tiene como tarea generar un conjunto de datos simulados para entrenar un modelo de Machine Learning que prediga si un estudiante abandonar√° o no sus estudios.
Este conjunto de datos estar√° compuesto por 200 registros (estudiantes), y cada registro tendr√° varias caracter√≠sticas, como edad, horas de estudio, asistencia y promedio acad√©mico.
Adem√°s, debe incluir una columna Abandono que ser√° nuestra variable objetivo (el valor que queremos predecir).
Tareas:
Definir la clase SimuladorDatos:
La clase debe tener dos atributos:
n: n√∫mero de registros (por defecto 200).
seed: semilla para la aleatoriedad (por defecto 42) para que los resultados sean reproducibles.
La clase debe tener un m√©todo llamado generar(), que ser√° el encargado de crear y devolver un conjunto de datos simulado en formato pandas.DataFrame.
Generar las columnas del DataFrame:
El m√©todo generar() debe crear un DataFrame con las siguientes columnas (variables) y valores aleatorios:
Edad: Un valor aleatorio entre 18 y 30 a√±os.
Horas de estudio: Un valor decimal aleatorio entre 0 y 30 horas por semana.
Asistencia: Un valor decimal aleatorio entre 50% y 100% de asistencia a clases.
Promedio: Un valor decimal aleatorio entre 5 y 10, que representa el promedio acad√©mico del estudiante.
Uso_online: Un valor decimal aleatorio entre 0 y 15 horas semanales de uso de plataformas de aprendizaje online.
Abandono: Un valor binario (0 o 1) que indica si el estudiante abandonar√° sus estudios o no.
Aqu√≠, el valor 0 indica que el estudiante no abandonar√° y 1 indica que abandonar√°.
La probabilidad de que un estudiante abandone es del 30% (probabilidad de 0.3) y la probabilidad de que no abandone es del 70% (probabilidad de 0.7).
üîπ Clase ModeloAbandono
La clase ModeloAbandono se encargar√° de entrenar un modelo de Machine Learning para predecir si un estudiante abandonar√° o no sus estudios, bas√°ndose en las caracter√≠sticas proporcionadas en el conjunto de datos generado anteriormente (como edad, horas de estudio, asistencia, etc.).
El modelo se construir√° utilizando un √°rbol de decisi√≥n (Decision Tree) que es un algoritmo com√∫nmente usado para tareas de clasificaci√≥n.
Qu√© Debe Hacer el Alumno
Definir la clase ModeloAbandono:
La clase debe ser capaz de:
Entrenar un modelo de Machine Learning utilizando un conjunto de datos de estudiantes.
Evaluar el rendimiento del modelo.
Predecir si un estudiante espec√≠fico abandonar√° o no sus estudios.
Atributos de la clase:
max_depth: Este es un par√°metro del clasificador de √°rbol de decisi√≥n que define la profundidad m√°xima del √°rbol (por defecto, 4).
random_state: Semilla para la aleatoriedad, lo que asegura que los resultados sean reproducibles.
modelo: Este atributo ser√° el modelo de √°rbol de decisi√≥n que se entrenar√°.
M√©todos de la clase:
entrenar(data):
Este m√©todo debe recibir un DataFrame con los datos de los estudiantes, separar las caracter√≠sticas (X) de la variable objetivo (y), y dividir los datos en conjuntos de entrenamiento y prueba.
Debe entrenar un clasificador de √°rbol de decisi√≥n (DecisionTreeClassifier), ajustando el modelo a los datos de entrenamiento.
evaluar():
Este m√©todo debe evaluar el rendimiento del modelo usando los datos de prueba y calcular la precisi√≥n del modelo utilizando accuracy_score.
Tambi√©n debe mostrar un reporte de clasificaci√≥n usando la funci√≥n classification_report, que incluye m√©tricas como precisi√≥n, recall, y f1-score.
predecir_estudiante(estudiante_df):
Este m√©todo debe recibir un DataFrame con los datos de un estudiante y predecir si ese estudiante abandonar√° o no.
La salida debe ser "Abandonar√°" si el modelo predice 1 (abandono), o "Seguir√° estudiando" si el modelo predice 0 (no abandono).
üîπ Clase TestBasicoModeloAbandono
La clase TestBasicoModeloAbandono tiene como prop√≥sito hacer pruebas simples para validar que la soluci√≥n de predicci√≥n del abandono estudiantil funciona correctamente.
El alumno debe asegurarse de que el entrenamiento del modelo, su evaluaci√≥n y las predicciones para nuevos estudiantes se realicen correctamente.
Qu√© Debe Hacer el Alumno
Definir la clase TestBasicoModeloAbandono:
Esta clase tiene como objetivo integrar los componentes de simulaci√≥n, entrenamiento, evaluaci√≥n y predicci√≥n de manera que sea f√°cil verificar el funcionamiento de las clases previas (como SimuladorDatos y ModeloAbandono).
M√©todo ejecutar():
Este m√©todo ser√° el punto de entrada donde se llevar√°n a cabo las siguientes acciones:
Generar datos simulados utilizando la clase SimuladorDatos.
Entrenar el modelo utilizando la clase ModeloAbandono.
Evaluar el modelo y mostrar los resultados de la precisi√≥n y el reporte de clasificaci√≥n.
Realizar una predicci√≥n para un nuevo estudiante y mostrar el resultado.
Estructura de la Clase TestBasicoModeloAbandono
M√©todo ejecutar()
Este m√©todo tiene como objetivo ejecutar una serie de pasos secuenciales que permitan probar la funcionalidad del flujo completo de la predicci√≥n:
Generar los datos simulados:
Usar la clase SimuladorDatos para generar un conjunto de datos de 200 estudiantes, con diferentes caracter√≠sticas y etiquetas de abandono.
Entrenar el modelo:
Utilizar la clase ModeloAbandono para entrenar un modelo con los datos generados.
El modelo debe entrenarse con las caracter√≠sticas como Edad, Horas_estudio, Asistencia, etc., y aprender a predecir la variable Abandono.

Evaluar el modelo:
Evaluar el modelo utilizando el conjunto de datos de prueba, calcular la precisi√≥n, y generar el reporte de clasificaci√≥n. Esto verificar√° que el modelo est√° funcionando correctamente.

Realizar una predicci√≥n:
Crear un nuevo estudiante con caracter√≠sticas espec√≠ficas y utilizar el modelo entrenado para predecir si ese estudiante abandonar√° o no sus estudios.

üéØ Ejemplo de uso
test = TestModeloAbandono()
test.ejecutar()
Resultado esperado
Datos simulados:
    Edad  Horas_estudio  Asistencia  Promedio  Uso_online  Abandono
0    24      10.128455   55.803632  7.777159    7.845981         0
1    21      28.287291   52.300132  8.844937    5.382457         0
2    28       9.696088   52.036440  9.723829   13.158008         0
3    25      15.563719   92.773029  9.248237    5.886677         0
4    22      21.090569   85.182893  6.236741   12.248992         1
Entrenamiento completado.
Precisi√≥n del modelo: 0.57
Reporte de clasificaci√≥n:
               precision    recall  f1-score   support
 
           0       0.59      0.96      0.73        24
           1       0.00      0.00      0.00        16
 
    accuracy                           0.57        40
   macro avg       0.29      0.48      0.37        40
weighted avg       0.35      0.57      0.44        40
El estudiante probablemente: Seguir√° estudiando
'''

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

class SimuladorDatos:
    """
    Genera un conjunto de datos simulados para predecir el abandono estudiantil.
    """
    def __init__(self, n=200, seed=42):
        """
        Inicializa el simulador.

        Args:
            n (int): N√∫mero de registros a generar (por defecto 200).
            seed (int): Semilla para la generaci√≥n aleatoria (por defecto 42).
        """
        self.n = n
        self.seed = seed
        # Define los nombres de las columnas para asegurar el orden y consistencia
        self.column_names = ['Edad', 'Horas_estudio', 'Asistencia', 'Promedio', 'Uso_online', 'Abandono']

    def generar(self):
        """
        Genera y devuelve un DataFrame de pandas con datos simulados de estudiantes.

        Returns:
            pandas.DataFrame: DataFrame con los datos simulados.
        """
        np.random.seed(self.seed) # Asegura la reproducibilidad
        data = pd.DataFrame({
            'Edad': np.random.randint(18, 30 + 1, size=self.n), # Edad entre 18 y 30 (inclusive)
            'Horas_estudio': np.random.uniform(0, 30, size=self.n), # Horas de estudio entre 0 y 30
            'Asistencia': np.random.uniform(50, 100, size=self.n), # Asistencia entre 50% y 100%
            'Promedio': np.random.uniform(5, 10, size=self.n), # Promedio entre 5 y 10
            'Uso_online': np.random.uniform(0, 15, size=self.n), # Uso online entre 0 y 15 horas
            'Abandono': np.random.choice([0, 1], size=self.n, p=[0.7, 0.3]) # 0: No abandona (70%), 1: Abandona (30%)
        })
        # Reordena las columnas seg√∫n self.column_names para mantener el formato esperado
        data = data[self.column_names]
        return data

class ModeloAbandono:
    """
    Entrena, eval√∫a y realiza predicciones con un modelo de √°rbol de decisi√≥n
    para predecir el abandono estudiantil.
    """
    def __init__(self, max_depth=4, random_state=42):
        """
        Inicializa el modelo de abandono.

        Args:
            max_depth (int): Profundidad m√°xima del √°rbol de decisi√≥n (por defecto 4).
            random_state (int): Semilla para la aleatoriedad del modelo (por defecto 42).
        """
        self.max_depth = max_depth
        self.random_state = random_state
        self.modelo = None # El modelo DecisionTreeClassifier se almacenar√° aqu√≠
        # Atributos para almacenar los datos de entrenamiento/prueba y nombres de caracter√≠sticas
        # Se nombran sin guion bajo al final seg√∫n requerimiento del entorno de prueba.
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None
        self.feature_names = None # Lista con los nombres de las columnas de caracter√≠sticas

    def entrenar(self, data):
        """
        Entrena el modelo de √°rbol de decisi√≥n.

        Args:
            data (pandas.DataFrame): DataFrame con los datos de los estudiantes,
                                     incluyendo la columna 'Abandono'.
        """
        if 'Abandono' not in data.columns:
            raise ValueError("La columna 'Abandono' no se encuentra en los datos.")
        
        # Separa las caracter√≠sticas (X) de la variable objetivo (y)
        X = data.drop('Abandono', axis=1)
        y = data['Abandono']
        self.feature_names = X.columns.tolist() # Guarda los nombres de las caracter√≠sticas

        # Divide los datos en conjuntos de entrenamiento y prueba
        # stratify=y asegura que la proporci√≥n de clases se mantenga en ambos conjuntos
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            X, y, test_size=0.2, random_state=self.random_state, stratify=y
        )
        
        # Inicializa y entrena el clasificador de √°rbol de decisi√≥n
        self.modelo = DecisionTreeClassifier(
            max_depth=self.max_depth, 
            random_state=self.random_state
        )
        self.modelo.fit(self.X_train, self.y_train)
        print("Entrenamiento completado.")

    def evaluar(self):
        """
        Eval√∫a el rendimiento del modelo entrenado utilizando los datos de prueba.
        Muestra la precisi√≥n y el reporte de clasificaci√≥n.
        """
        if self.modelo is None or self.X_test is None or self.y_test is None:
            print("El modelo no ha sido entrenado o los datos de prueba no est√°n disponibles.")
            return

        # Realiza predicciones sobre el conjunto de prueba
        y_pred = self.modelo.predict(self.X_test)
        
        # Calcula la precisi√≥n
        accuracy = accuracy_score(self.y_test, y_pred)
        
        # Genera el reporte de clasificaci√≥n (precisi√≥n, recall, f1-score)
        # zero_division=0 evita warnings si alguna clase no tiene predicciones, mostrando 0.0
        report = classification_report(self.y_test, y_pred, zero_division=0) 
        
        print(f"Precisi√≥n del modelo: {accuracy:.2f}")
        print(f"Reporte de clasificaci√≥n:\n{report}")

    def predecir_estudiante(self, estudiante_df):
        """
        Predice si un estudiante espec√≠fico abandonar√° o no sus estudios.

        Args:
            estudiante_df (pandas.DataFrame): DataFrame con los datos de un √∫nico estudiante.
                                             Debe contener las mismas columnas de caracter√≠sticas
                                             que los datos de entrenamiento.

        Returns:
            str: "Abandonar√°" o "Seguir√° estudiando", o un mensaje de error.
        """
        if self.modelo is None:
            print("El modelo no ha sido entrenado.")
            return "Error: Modelo no entrenado"
        
        if not isinstance(estudiante_df, pd.DataFrame):
            raise ValueError("Los datos del estudiante deben ser un DataFrame de pandas.")

        # Asegura que el DataFrame del estudiante tenga las columnas correctas y en el orden esperado
        try:
            # Reordena/selecciona las columnas del DataFrame del estudiante para que coincidan con self.feature_names
            estudiante_df_aligned = estudiante_df[self.feature_names]
        except KeyError as e:
            print(f"Error: Faltan columnas en los datos del estudiante o nombres incorrectos: {e}")
            print(f"Se esperaban las columnas: {self.feature_names}")
            return "Error: Datos del estudiante incompletos o incorrectos"

        # Realiza la predicci√≥n
        prediccion = self.modelo.predict(estudiante_df_aligned)[0] # [0] para obtener el valor de la predicci√≥n
        
        return "Abandonar√°" if prediccion == 1 else "Seguir√° estudiando"

class TestBasicoModeloAbandono:
    """
    Clase para probar el flujo completo: simulaci√≥n, entrenamiento, evaluaci√≥n y predicci√≥n.
    """
    def ejecutar(self):
        """
        Ejecuta el proceso completo de prueba del modelo de abandono.
        """
        # 1. Generar datos simulados
        print("Generando datos simulados...")
        simulador = SimuladorDatos(n=200, seed=42)
        datos_simulados = simulador.generar()
        print("Datos simulados (primeras 5 filas):")
        print(datos_simulados.head())
        print("-" * 30)

        # 2. Entrenar el modelo
        print("Entrenando el modelo...")
        # Se usa max_depth=4 y random_state=42 seg√∫n los requisitos de la clase ModeloAbandono
        modelo_abandono = ModeloAbandono(max_depth=4, random_state=42) 
        modelo_abandono.entrenar(datos_simulados)
        print("-" * 30)

        # 3. Evaluar el modelo
        print("Evaluando el modelo...")
        modelo_abandono.evaluar()
        print("-" * 30)

        # 4. Realizar una predicci√≥n para un nuevo estudiante
        print("Realizando predicci√≥n para un nuevo estudiante...")
        # Crear un DataFrame para el nuevo estudiante.
        # Es crucial que las columnas coincidan con `modelo_abandono.feature_names`
        # en nombre y orden.
        nuevo_estudiante_datos = pd.DataFrame({
            'Edad': [22],
            'Horas_estudio': [5],    # Bajas horas de estudio, posible indicador de abandono
            'Asistencia': [60],      # Baja asistencia, posible indicador de abandono
            'Promedio': [5.5],       # Bajo promedio, posible indicador de abandono
            'Uso_online': [2]        # Bajo uso online
        }, columns=modelo_abandono.feature_names) # Asegura el orden y nombres de columnas

        prediccion_nuevo = modelo_abandono.predecir_estudiante(nuevo_estudiante_datos)
        print(f"Predicci√≥n para el nuevo estudiante: {prediccion_nuevo}")


# Ejemplo de uso seg√∫n el problema
if __name__ == "__main__":
    # El problema indica TestModeloAbandono() en el ejemplo de uso,
    # pero la clase se llama TestBasicoModeloAbandono.
    test = TestBasicoModeloAbandono() 
    test.ejecutar()
