''' Predicci√≥n del consumo energ√©tico - Practicar con numpy para generar datos sint√©ticos, con regresi√≥n lineal para realizar estimaciones de consumo energ√©tico y con matplotlib para construir un gr√°fico con los datos obtenidos

üìò Contexto:
La eficiencia energ√©tica es una prioridad en las ciudades modernas. Las compa√±√≠as el√©ctricas intentan predecir cu√°nto se consumir√° en funci√≥n de las condiciones meteorol√≥gicas. En este proyecto, desarrollar√°s un modelo de regresi√≥n lineal que permita predecir el consumo de energ√≠a en funci√≥n de la temperatura ambiental.

üéØ Objetivo del proyecto:
Construir un sistema que:
Genere datos sint√©ticos con numpy representando temperatura (¬∞C) y consumo energ√©tico (kWh).
Use regresi√≥n lineal (sklearn.linear_model.LinearRegression) para aprender la relaci√≥n entre ambas variables.
Permita hacer predicciones para nuevas temperaturas.
Visualice los datos y el modelo con matplotlib.

üõ†Ô∏è Requerimientos:
1. Crear una clase EnergyRecord
Guarda los atributos: temperature y consumption.
A√±ade un m√©todo .to_vector() que devuelva [temperature] como vector de entrada al modelo.
2. Generar los datos con una clase EnergyDataGenerator
Crea datos sint√©ticos con numpy.random.uniform(-5, 35) para la temperatura.
Calcula el consumo simulando que cuando hace m√°s fr√≠o o m√°s calor que 20 ¬∞C, el consumo aumenta:
consumo = 100 + (abs(temperatura - 20) * 3) + ruido
A√±ade un poco de ruido con numpy.random.normal(0, 5).
El m√©todo generate() devuelve una lista de objetos EnergyRecord
3. Crear la clase EnergyRegressor
Usa LinearRegression de sklearn para ajustar el modelo.
M√©todos necesarios:
fit() para entrenar con una lista de EnergyRecord.
predict(temperature) para predecir consumo dado una temperatura.
get_model() para acceder al modelo (√∫til para graficar).
4. Implementar una clase EnergyPredictionExample
Que cree los datos, entrene el modelo y prediga para una temperatura nueva (por ejemplo, 30 ¬∞C).
Tambi√©n debe mostrar una gr√°fica:
Un scatter plot de los datos.
Una l√≠nea roja representando la recta de regresi√≥n.
5. Visualizaci√≥n con matplotlib
Agrega t√≠tulos, etiquetas de ejes y leyenda para una mejor comprensi√≥n.
Usa .plot() para la l√≠nea de predicci√≥n del modelo.

‚úÖ Ejemplo de uso
example = EnergyPredictionExample()
example.run()

Salida esperada
üîç Temperatura: 30 ¬∞C
‚ö° Predicci√≥n de consumo: 120.70 kWh
'''

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

class EnergyRecord:
    """
    Guarda los atributos: temperature y consumption.
    """
    def __init__(self, temperature, consumption):
        """
        Inicializa un registro de energ√≠a.

        Args:
            temperature (float): La temperatura en ¬∞C.
            consumption (float): El consumo energ√©tico en kWh.
        """
        self.temperature = temperature
        self.consumption = consumption

    def to_vector(self):
        """
        Devuelve [temperature] como vector de entrada al modelo.
        sklearn espera una matriz 2D para X, as√≠ que esto ser√° [temperature].
        """
        return [self.temperature]

class EnergyDataGenerator:
    """
    Genera datos sint√©ticos de temperatura y consumo energ√©tico.
    """
    def __init__(self, num_samples=100):
        """
        Inicializa el generador de datos.

        Args:
            num_samples (int): N√∫mero de muestras de datos a generar.
        """
        self.num_samples = num_samples

    def generate(self):
        """
        Genera datos sint√©ticos.
        - Temperatura: Distribuci√≥n uniforme entre -5¬∞C y 35¬∞C.
        - Consumo: 100 + (abs(temperatura - 20) * 3) + ruido.
        - Ruido: Distribuci√≥n normal con media 0 y desviaci√≥n est√°ndar 5.

        Returns:
            list: Una lista de objetos EnergyRecord.
        """
        # Generar temperaturas
        temperatures = np.random.uniform(-5, 35, self.num_samples)
        
        # Generar ruido
        noise = np.random.normal(0, 5, self.num_samples)
        
        # Calcular consumo
        # El consumo aumenta cuando la temperatura se aleja de 20¬∞C (hacia m√°s fr√≠o o m√°s calor)
        consumptions = 100 + (np.abs(temperatures - 20) * 3) + noise
        
        records = []
        for temp, cons in zip(temperatures, consumptions):
            records.append(EnergyRecord(temp, cons))
            
        return records

class EnergyRegressor:
    """
    Ajusta un modelo de regresi√≥n lineal y realiza predicciones.
    """
    def __init__(self):
        """
        Inicializa el regresor con un modelo de LinearRegression de sklearn.
        """
        self.model = LinearRegression()

    def fit(self, records):
        """
        Entrena el modelo de regresi√≥n lineal.

        Args:
            records (list): Una lista de objetos EnergyRecord para entrenar el modelo.
        """
        # Preparar los datos para sklearn
        # X debe ser una matriz 2D donde cada fila es una muestra y cada columna es una caracter√≠stica
        # y debe ser un vector 1D de los valores objetivo
        X_train = np.array([record.to_vector() for record in records])
        y_train = np.array([record.consumption for record in records])
        
        self.model.fit(X_train, y_train)

    def predict(self, temperature):
        """
        Predice el consumo energ√©tico para una temperatura dada.

        Args:
            temperature (float): La temperatura para la cual predecir el consumo.

        Returns:
            float: El consumo energ√©tico predicho en kWh.
        """
        # El modelo espera una entrada 2D ([[-5], [0], [30]]), incluso para una sola predicci√≥n
        temp_vector = np.array([[temperature]])
        prediction = self.model.predict(temp_vector)
        return prediction[0]

    def get_model(self):
        """
        Devuelve el modelo de regresi√≥n lineal entrenado.

        Returns:
            LinearRegression: El objeto del modelo de sklearn.
        """
        return self.model

class EnergyPredictionExample:
    """
    Orquesta la generaci√≥n de datos, entrenamiento del modelo, predicci√≥n y visualizaci√≥n.
    """
    def __init__(self, num_samples=100, temp_to_predict=30.0):
        """
        Inicializa el ejemplo de predicci√≥n.

        Args:
            num_samples (int): N√∫mero de muestras de datos sint√©ticos a generar.
            temp_to_predict (float): Temperatura para la cual se realizar√° una predicci√≥n.
        """
        self.num_samples = num_samples
        self.temp_to_predict = temp_to_predict
        self.data_generator = EnergyDataGenerator(num_samples=self.num_samples)
        self.regressor = EnergyRegressor()
        self.records = None

    def run(self):
        """
        Ejecuta el flujo completo: generar datos, entrenar, predecir y visualizar.
        """
        # 1. Generar datos
        self.records = self.data_generator.generate()
        
        # 2. Entrenar el modelo
        self.regressor.fit(self.records)
        
        # 3. Predecir para una nueva temperatura
        predicted_consumption = self.regressor.predict(self.temp_to_predict)
        
        print(f"üîç Temperatura: {self.temp_to_predict}¬∞C")
        print(f"‚ö° Predicci√≥n de consumo: {predicted_consumption:.2f} kWh")
        
        # 4. Visualizar los datos y el modelo
        self._plot_results()

    def _plot_results(self):
        """
        Muestra una gr√°fica con los datos generados y la recta de regresi√≥n.
        """
        if not self.records:
            print("No hay datos para graficar. Ejecute run() primero.")
            return

        temperatures = np.array([record.temperature for record in self.records])
        consumptions = np.array([record.consumption for record in self.records])

        plt.figure(figsize=(10, 6))
        
        # Scatter plot de los datos originales
        plt.scatter(temperatures, consumptions, alpha=0.6, label='Datos Sint√©ticos')
        
        # L√≠nea de regresi√≥n
        # Generar puntos para la l√≠nea de regresi√≥n basados en el rango de temperaturas observadas
        model = self.regressor.get_model()
        x_line = np.linspace(temperatures.min(), temperatures.max(), 100).reshape(-1, 1)
        y_line = model.predict(x_line)
        
        plt.plot(x_line, y_line, color='red', linewidth=2, label='Recta de Regresi√≥n Lineal')
        
        # T√≠tulos y etiquetas
        plt.title('Predicci√≥n de Consumo Energ√©tico vs. Temperatura')
        plt.xlabel('Temperatura (¬∞C)')
        plt.ylabel('Consumo Energ√©tico (kWh)')
        plt.legend()
        plt.grid(True)
        plt.show()

if __name__ == "__main__":
    # Ejemplo de uso
    example = EnergyPredictionExample(num_samples=200, temp_to_predict=30.0)
    example.run()

    # Ejemplo con otra temperatura para probar
    # example_cold = EnergyPredictionExample(num_samples=200, temp_to_predict=-2.0)
    # example_cold.run()

'''
Resuelve en un script python el ejercicio: @51. Ej Machine Learning.py
Crea el c√≥digo limpio y con comentarios que sea compatible con el entorno de udemy.
No es necesario explicaciones, solo el script para copiar.
'''