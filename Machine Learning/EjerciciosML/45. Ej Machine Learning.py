''' Predicci√≥n del Precio de una Vivienda - Practicar con la eleccion de algoritmo y realizar estimaci√≥n del precio de una vivienda

üéØ Objetivo
Desarrollar un sistema de predicci√≥n que estime el precio de una vivienda en funci√≥n de sus caracter√≠sticas (como superficie, n√∫mero de habitaciones, antig√ºedad, etc.) utilizando regresi√≥n lineal. El sistema debe construirse completamente con clases en Python.

üß± Paso 1: Simular los datos
Clase: SimuladorViviendas
Esta clase se encargar√° de generar un conjunto de datos sint√©ticos con pandas y numpy.
‚úîÔ∏è Instrucciones:
La clase debe llamarse SimuladorViviendas.
Debe tener un m√©todo generar_datos() que devuelva un DataFrame con 200 registros y las siguientes columnas:

üîç Paso 2: Crear el modelo de predicci√≥n
Clase: ModeloPrecioVivienda
Esta clase representar√° el modelo de regresi√≥n lineal. Se encargar√° del entrenamiento, evaluaci√≥n y predicci√≥n.
‚úîÔ∏è M√©todos obligatorios:
entrenar(data: pd.DataFrame):
Separa los datos en variables independientes y la variable objetivo (Precio).
Divide los datos en entrenamiento (80%) y prueba (20%).
Entrena un modelo de regresi√≥n lineal con scikit-learn.
evaluar():
Muestra el error cuadr√°tico medio (MSE).
Muestra el coeficiente de determinaci√≥n R¬≤.
predecir(nueva_vivienda: pd.DataFrame) -> float:
Recibe un DataFrame con las caracter√≠sticas de una vivienda.
Devuelve el precio estimado.

üß™ Paso 3: Probar todo en conjunto
Clase: TestModeloPrecio
Esta clase servir√° como lanzador general para probar que todo funcione correctamente. Dentro del m√©todo ejecutar() debe:
Generar los datos usando SimuladorViviendas.
Entrenar y evaluar el modelo con ModeloPrecioVivienda.
Crear una vivienda de ejemplo (por ejemplo: superficie 120 m¬≤, 3 habitaciones, 10 a√±os de antig√ºedad, 5 km al centro, 2 ba√±os).
Imprimir el precio estimado.
‚úÖ Requisitos t√©cnicos
Usar pandas, numpy y scikit-learn (LinearRegression, train_test_split, mean_squared_error, r2_score).
Las clases deben estar bien documentadas.
El c√≥digo debe poder ejecutarse de principio a fin sin errores.

üß™ Ejemplo de uso
test = TestModeloPrecio()
test.ejecutar()
Salida esperada
Primeras filas de datos simulados:
    Superficie  Habitaciones  Antig√ºedad  Distancia_centro  Ba√±os  \
0   87.454012             4          32          9.810270      3   
1  145.071431             3          39          7.713692      1   
2  123.199394             1           9         12.089466      2   
3  109.865848             4          42          2.476958      2   
4   65.601864             4          43         19.513501      2   

          Precio  
0  259267.477436  
1  314958.241175  
2  467942.246565  
3  238538.397746  
4  238781.280758  
Modelo entrenado correctamente.
Error Cuadr√°tico Medio (MSE): 14748907009.71
R¬≤ del modelo: 0.02
El precio estimado de la vivienda es: $284,716.76
'''

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

class SimuladorViviendas:
    """
    Clase para simular datos de viviendas.
    """

    def generar_datos(self):
        """
        Genera un DataFrame con datos simulados de viviendas.

        Returns:
            pd.DataFrame: DataFrame con las columnas 'Superficie', 'Habitaciones', 
                          'Antig√ºedad', 'Distancia_centro', 'Ba√±os' y 'Precio'.
        """
        np.random.seed(42)  # Para reproducibilidad
        n_registros = 200
        data = pd.DataFrame({
            'Superficie': np.random.normal(100, 20, n_registros),  # Superficie en m¬≤
            'Habitaciones': np.random.randint(1, 5, n_registros),  # N√∫mero de habitaciones
            'Antig√ºedad': np.random.randint(0, 50, n_registros),  # Antig√ºedad en a√±os
            'Distancia_centro': np.random.normal(10, 5, n_registros),  # Distancia al centro en km
            'Ba√±os': np.random.randint(1, 4, n_registros)  # N√∫mero de ba√±os
        })

        # Generar precio con una relaci√≥n lineal con las caracter√≠sticas, m√°s ruido
        precio_base = 100000
        precio_por_m2 = 2000
        precio_por_habitacion = 15000
        precio_por_ba√±o = 10000
        factor_antiguedad = -1000
        factor_distancia = -5000

        data['Precio'] = (precio_base +
                          data['Superficie'] * precio_por_m2 +
                          data['Habitaciones'] * precio_por_habitacion +
                          data['Ba√±os'] * precio_por_ba√±o +
                          data['Antig√ºedad'] * factor_antiguedad +
                          data['Distancia_centro'] * factor_distancia +
                          np.random.normal(0, 50000, n_registros))  # Ruido

        return data

class ModeloPrecioVivienda:
    """
    Clase para el modelo de regresi√≥n lineal de precios de viviendas.
    """

    def __init__(self):
        """
        Inicializa el modelo de regresi√≥n lineal.
        """
        self.modelo = LinearRegression()

    def entrenar(self, data: pd.DataFrame):
        """
        Entrena el modelo con los datos proporcionados.

        Args:
            data (pd.DataFrame): DataFrame con las caracter√≠sticas y el precio de las viviendas.
        """
        # Separar variables independientes (X) y dependiente (y)
        X = data.drop('Precio', axis=1)
        y = data['Precio']

        # Dividir en conjuntos de entrenamiento y prueba
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        # Entrenar el modelo
        self.modelo.fit(self.X_train, self.y_train)
        print("Modelo entrenado correctamente.")  # Mensaje de confirmaci√≥n

    def evaluar(self):
        """
        Eval√∫a el modelo con el conjunto de prueba.

        Returns:
            None: Imprime el MSE y el R¬≤.
        """
        # Predecir con el conjunto de prueba
        y_pred = self.modelo.predict(self.X_test)

        # Calcular y mostrar m√©tricas
        mse = mean_squared_error(self.y_test, y_pred)
        r2 = r2_score(self.y_test, y_pred)
        print(f"Error Cuadr√°tico Medio (MSE): {mse:.2f}")
        print(f"R¬≤ del modelo: {r2:.2f}")

    def predecir(self, nueva_vivienda: pd.DataFrame) -> float:
        """
        Predice el precio de una nueva vivienda.

        Args:
            nueva_vivienda (pd.DataFrame): DataFrame con las caracter√≠sticas de la vivienda.

        Returns:
            float: Precio estimado de la vivienda.
        """
        precio_estimado = self.modelo.predict(nueva_vivienda)
        return precio_estimado[0]

class TestModeloPrecio:
    """
    Clase para probar el modelo de predicci√≥n de precios de viviendas.
    """

    def ejecutar(self):
        """
        Ejecuta el proceso de generaci√≥n de datos, entrenamiento, evaluaci√≥n y predicci√≥n.
        """
        # Generar datos
        simulador = SimuladorViviendas()
        datos = simulador.generar_datos()
        print("Primeras filas de datos simulados:")
        print(datos.head())

        # Entrenar y evaluar el modelo
        modelo = ModeloPrecioVivienda()
        modelo.entrenar(datos)
        modelo.evaluar()

        # Crear una vivienda de ejemplo
        vivienda_ejemplo = pd.DataFrame({
            'Superficie': [120],
            'Habitaciones': [3],
            'Antig√ºedad': [10],
            'Distancia_centro': [5],
            'Ba√±os': [2]
        })

        # Predecir el precio de la vivienda de ejemplo
        precio_estimado = modelo.predecir(vivienda_ejemplo)
        print(f"El precio estimado de la vivienda es: ${precio_estimado:,.2f}")

# Ejemplo de uso
test = TestModeloPrecio()
test.ejecutar()
