import pandas as pd
import numpy as np

from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

''' Ejercicio de codificaci√≥n 16
Clasificaci√≥n Binaria
Supongamos que tienes un conjunto de datos que contiene informaci√≥n sobre pacientes y deseas predecir si un paciente tiene una enfermedad (1) o no (0) en funci√≥n de algunas caracter√≠sticas m√©dicas, como la edad y los niveles de colesterol.
Tu tarea es desarrollar una funci√≥n llamada regresion_logistica que tome estos datos como entrada y ajuste un modelo de regresi√≥n log√≠stica para la clasificaci√≥n binaria.
def regresion_logistica(datos):
# Ejemplo de uso con datos de pacientes
data = {
    'Edad': [50, 35, 65, 28, 60],
    'Colesterol': [180, 150, 210, 130, 190],
    'Enfermedad': [1, 0, 1, 0, 1]
}
df = pd.DataFrame(data)
modelo_regresion_logistica = regresion_logistica(df)
# Estimaciones de clasificaci√≥n binaria para nuevos datos
nuevos_datos = pd.DataFrame({'Edad': [45, 55], 'Colesterol': [170, 200]})
estimaciones_clasificacion = modelo_regresion_logistica.predict(nuevos_datos)
print("Estimaciones de Clasificaci√≥n:")
print(estimaciones_clasificacion)
Resultados:
Estimaciones de Clasificaci√≥n:
[1 1]
'''
def regresion_logistica(datos):
    # 1. Definir las columnas de caracter√≠sticas (X) y la columna objetivo (Y)
    features = ['Edad', 'Colesterol']
    target = 'Enfermedad'
    # 2. Seleccionar X e Y del DataFrame de entrada 'datos
    X = datos[features]
    Y = datos[target]
    # 3. Crear una instancia del modelo de Regresi√≥n
    modelo = LogisticRegression()
    # 4. Entrenar (ajustar) el modelo
    modelo.fit(X, Y)
    # 5. Devolver el modelo entrenado
    return modelo

# Ejemplo de uso con datos de pacientes
data = {
    'Edad': [50, 35, 65, 28, 60],
    'Colesterol': [180, 150, 210, 130, 190],
    'Enfermedad': [1, 0, 1, 0, 1]
}
df = pd.DataFrame(data)
modelo_regresion_logistica = regresion_logistica(df)

# Estimaciones de clasificaci√≥n binaria para nuevos datos
nuevos_datos = pd.DataFrame({'Edad': [45, 55], 'Colesterol': [170, 200]})
estimaciones_clasificacion = modelo_regresion_logistica.predict(nuevos_datos)
print("Estimaciones de Clasificaci√≥n:")
print(estimaciones_clasificacion)
# Salida:
# Estimaciones de Clasificaci√≥n:
# [1 1]

''' Ejercicio de codificaci√≥n 17
Predecir futuro de una app
¬øTendr√° √©xito tu app?
üì± Contexto
Eres parte de un equipo de an√°lisis de una startup que lanza apps m√≥viles. Se te ha asignado la tarea de construir un modelo que pueda predecir si una app ser√° exitosa o no en funci√≥n de sus m√©tricas iniciales.
La empresa ha recopilado datos de otras apps anteriores, tanto exitosas como fallidas, y quiere automatizar este an√°lisis con Machine Learning.
üéØ Objetivo
Crea un sistema en Python que permita:
Representar los datos de una app.
Preparar un conjunto de datos a partir de m√∫ltiples apps.
Entrenar un modelo de regresi√≥n log√≠stica con scikit-learn.
Predecir si una app ser√° exitosa.
De forma opcional, mostrar la probabilidad de √©xito.
üß± Estructura del proyecto
Debes implementar las siguientes clases:
üì¶ App
Representa una app m√≥vil con las siguientes caracter√≠sticas:
app_name: nombre de la app.
monthly_users: n√∫mero de usuarios mensuales.
avg_session_length: duraci√≥n media de las sesiones (en minutos).
retention_rate: tasa de retenci√≥n entre 0 y 1.
social_shares: n√∫mero de veces que se ha compartido en redes sociales.
success: valor opcional (1 = √©xito, 0 = fracaso).
M√©todo:
to_features(self): devuelve una lista de caracter√≠sticas num√©ricas.
üìä AppDataset
Representa un conjunto de datos de apps. Debe incluir:
Lista de objetos App.
M√©todos:
get_feature_matrix(self): devuelve una matriz de caracter√≠sticas.
get_target_vector(self): devuelve un vector de etiquetas (success).
ü§ñ SuccessPredictor
Encargado de entrenar y usar el modelo de regresi√≥n log√≠stica.
M√©todos:
train(dataset): entrena el modelo usando un AppDataset.
predict(app): devuelve 1 o 0 para predecir si la app ser√° exitosa.
predict_proba(app): (opcional) devuelve la probabilidad de √©xito como n√∫mero decimal entre 0 y 1.
üí° Sugerencia: puedes usar StandardScaler para mejorar la precisi√≥n del modelo escalando los datos.
Ejemplo de uso:
# Datos de entrenamiento
apps = [
    App("FastChat", 10000, 12.5, 0.65, 1500, 1),
    App("FitTrack", 500, 5.0, 0.2, 50, 0),
    App("GameHub", 15000, 25.0, 0.75, 3000, 1),
    App("BudgetBuddy", 800, 6.5, 0.3, 80, 0),
    App("EduFlash", 12000, 18.0, 0.7, 2200, 1),
    App("NoteKeeper", 600, 4.0, 0.15, 30, 0)
]
dataset = AppDataset(apps)
predictor = SuccessPredictor()
predictor.train(dataset)
# Nueva app a evaluar
new_app = App("StudyBoost", 20000, 15.0, 0.5, 700)
predicted_success = predictor.predict(new_app)
prob = predictor.predict_proba(new_app)
print(f"¬øSer√° exitosa la app {new_app.app_name}? {'S√≠' if predicted_success else 'No'}")
print(f"Probabilidad estimada de √©xito: {prob:.2f}")
'''
class App:
    def __init__ (self, app_name, monthly_users, avg_session_length, retention_rate, social_shares, success=None):
        self.app_name = app_name
        self.monthly_users = monthly_users
        self.avg_session_length = avg_session_length
        self.retention_rate = retention_rate
        self.social_shares = social_shares
        self.success = success
    def to_features(self):
        return [self.monthly_users, self.avg_session_length, self.retention_rate, self.social_shares]

class AppDataset:
    def __init__ (self, apps_list):
        self.apps_list = apps_list
    def get_feature_matrix(self):
        return [app.to_features() for app in self.apps_list]
    def get_target_vector(self):
        return [app.success for app in self.apps_list if app.success is not None] # Asegurarse de que solo se incluyen apps con valor de 'success' conocido

class SuccessPredictor:
    def __init__ (self):
        self.model = LogisticRegression()
        self.escalador = StandardScaler() # A√±adido: Inicializa el StandardScaler. Objeto para escalar los datos
        self.escalador_ajustado = False # A√±adido: Flag para saber si el escalador ya aprendi√≥ la escala
    def train(self, dataset: AppDataset):
        X = dataset.get_feature_matrix()
        Y = dataset.get_target_vector()
        X_scaled = self.escalador.fit_transform(X) # Ajustar el escalador a los datos de entrenamiento Y transformarlos
        self.escalador_ajustado = True # Marcar que el escalador est√° listo
        self.model.fit(X_scaled, Y)
    def predict(self, app: App):
        """
        Predice la clase (0 o 1) para una nueva app.
        Escala las caracter√≠sticas de la app usando el escalador ya ajustado.
        """
        if not self.escalador_ajustado:
            raise RuntimeError("El predictor debe ser entrenado ('train') antes de hacer predicciones.")
        # 1. Obtener caracter√≠sticas de la app
        caracteristicas_app = app.to_features()
        datos_para_predecir = [caracteristicas_app] # Formato 2D requerido
        # 2. Escalar las caracter√≠sticas
        datos_escalados = self.escalador.transform(datos_para_predecir)
        # 3. Hacer predicci√≥n con datos escalados
        predicciones = self.model.predict(datos_escalados)
        valor_predicho = predicciones[0]
        return int(valor_predicho)
    def predict_proba(self, app: App):
        """
        Predice la probabilidad de √©xito (clase 1) para una nueva app.
        Escala las caracter√≠sticas de la app usando el escalador ya ajustado.
        """
        if not self.escalador_ajustado:
             raise RuntimeError("El predictor debe ser entrenado ('train') antes de predecir probabilidades.")
        # 1. Obtener caracter√≠sticas de la app
        caracteristicas_app = app.to_features()
        datos_para_predecir = [caracteristicas_app] # Formato 2D
        # --- CORRECCI√ìN: Escalar los datos de la nueva app ---
        # 2. Usar transform() para aplicar la escala aprendida en train
        datos_escalados = self.escalador.transform(datos_para_predecir)
        # 3. Predecir probabilidades usando los datos ESCALADOS
        probabilidades = self.model.predict_proba(datos_escalados)
        # ------------------------------------------------------
        # predict_proba devuelve [[prob_clase_0, prob_clase_1]]
        probabilidad_exitosa = probabilidades[0][1]
        return float(probabilidad_exitosa)

# Datos de entrenamiento
apps = [
    App("FastChat", 10000, 12.5, 0.65, 1500, 1),
    App("FitTrack", 500, 5.0, 0.2, 50, 0),
    App("GameHub", 15000, 25.0, 0.75, 3000, 1),
    App("BudgetBuddy", 800, 6.5, 0.3, 80, 0),
    App("EduFlash", 12000, 18.0, 0.7, 2200, 1),
    App("NoteKeeper", 600, 4.0, 0.15, 30, 0)
]
 
dataset = AppDataset(apps)
predictor = SuccessPredictor()
predictor.train(dataset)
 
# Nueva app a evaluar
new_app = App("StudyBoost", 20000, 15.0, 0.5, 700)
predicted_success = predictor.predict(new_app)
prob = predictor.predict_proba(new_app)
 
print(f"¬øSer√° exitosa la app {new_app.app_name}? {'S√≠' if predicted_success else 'No'}")
print(f"Probabilidad estimada de √©xito: {prob:.2f}")

''' Ejercicio de codificaci√≥n 18
Predecir resultados en partidas multijugador
üß† Objetivo
En este ejercicio, aplicar√°s tus conocimientos de regresi√≥n log√≠stica para construir un modelo capaz de predecir si un jugador gan√≥ o perdi√≥ una partida, a partir de sus estad√≠sticas individuales.
üìã Descripci√≥n del problema
Tienes que construir un modelo predictivo que, a partir de las estad√≠sticas de un jugador en una partida, determine si gan√≥ o no. Para ello, deber√°s:
Crear datos sint√©ticos que representen partidas ficticias de jugadores.
Entrenar un modelo de regresi√≥n log√≠stica con esos datos.
Implementar una funci√≥n que prediga el resultado (ganar o no) para un nuevo jugador.

üì¶ Paso 1: Definir una clase para representar una partida
Crea una clase PlayerMatchData con los siguientes atributos:
kills: n√∫mero de enemigos eliminados
deaths: n√∫mero de veces que el jugador ha muerto
assists: asistencias realizadas
damage_dealt: da√±o total infligido
damage_received: da√±o total recibido
healing_done: curaci√≥n realizada
objective_time: tiempo (en segundos) que el jugador estuvo capturando objetivos
won: 1 si el jugador gan√≥ la partida, 0 si perdi√≥
Incluye un m√©todo .to_dict() que devuelva los datos como un diccionario (sin la variable won, opcionalmente).

üì¶ Paso 2: Generar datos sint√©ticos con NumPy
Crea una funci√≥n llamada generate_synthetic_data que genere un conjunto de datos de entrenamiento simulando partidas de videojuegos. Para ello:
Utiliza la librer√≠a numpy para generar los valores num√©ricos.
Cada instancia representar√° el desempe√±o de un jugador en una partida.
La funci√≥n debe devolver una lista de objetos PlayerMatchData (ya definida previamente).
Implementa la siguiente l√≥gica para cada jugador:
Reglas para los datos:
kills: n√∫mero de enemigos eliminados, generado con una distribuci√≥n de Poisson con media 5.
kills = np.random.poisson(5)
deaths: n√∫mero de veces que el jugador ha muerto, distribuci√≥n de Poisson con media 3.
assists: asistencias realizadas, distribuci√≥n de Poisson con media 2.
damage_dealt: da√±o infligido, calculado como kills * 300 + ruido aleatorio normal.
damage_received = deaths * 400 + np.random.normal(0, 100)
damage_received: da√±o recibido, como deaths * 400 + ruido aleatorio normal.
healing_done: cantidad de curaci√≥n, valor aleatorio entero entre 0 y 300.
objective_time: tiempo (en segundos) controlando objetivos, valor aleatorio entre 0 y 120.
won: el jugador se considera que gan√≥ la partida si hizo m√°s da√±o del que recibi√≥ y tuvo m√°s kills que muertes.
üß† Tu funci√≥n debe seguir esta estructura:
import numpy as np
def generate_synthetic_data(n=100):
    data = []
    for _ in range(n):
        # Genera cada variable siguiendo las instrucciones dadas
        # Crea un objeto PlayerMatchData con estos valores
        # A√±√°delo a la lista de datos
    return data

üß™ Paso 3: Crear y entrenar el modelo
Crea una clase VictoryPredictor que entrene un modelo de regresi√≥n log√≠stica con los datos sint√©ticos. Esta clase debe tener:
Un m√©todo train(data) para entrenar el modelo.
Un m√©todo predict(player: PlayerMatchData) que devuelva 1 si predice victoria, 0 si derrota.

üìå Ejemplo de uso
# Crear datos de entrenamiento
training_data = generate_synthetic_data(150)
# Entrenar modelo
predictor = VictoryPredictor()
predictor.train(training_data)
# Crear jugador de prueba
test_player = PlayerMatchData(8, 2, 3, 2400, 800, 120, 90, None)
# Predecir si ganar√°
prediction = predictor.predict(test_player)
print(f"¬øEl jugador ganar√°? {'S√≠' if prediction == 1 else 'No'}")
Salida esperada
¬øEl jugador ganar√°? S√≠
'''
class PlayerMatchData:
    def __init__ (self, kills, deaths, assists, damage_dealt, damage_received, healing_done, objective_time, won=None):
        self.kills = kills
        self.deaths = deaths
        self.assists = assists
        self.damage_dealt = damage_dealt
        self.damage_received = damage_received
        self.healing_done = healing_done
        self.objective_time = objective_time
        self.won = won
    def to_dict(self):
        data_dict = {
            'kills': self.kills,
            'deaths': self.deaths,
            'assists': self.assists,
            'damage_dealt': self.damage_dealt,
            'damage_received': self.damage_received,
            'healing_done': self.healing_done,
            'objective_time': self.objective_time
        }
        return data_dict

def generate_synthetic_data(n=100):
    data = []
    for _ in range(n):
        kills = np.random.poisson(5)
        deaths = np.random.poisson(3)
        assists = np.random.poisson(2)
        damage_dealt = kills * 300 + np.random.normal(0, 100)
        damage_received = deaths * 400 + np.random.normal(0, 100)
        healing_done = np.random.randint(0, 301)
        objective_time = np.random.randint(0, 121)
        won = 1 if damage_dealt > damage_received and kills > deaths else 0
        